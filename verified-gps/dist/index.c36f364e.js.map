{"mappings":"AAAA,yBAAyB;AACzB,yDAAyD;AACzD,+CAA+C;AAC/C,+DAA+D;AAC/D,+EAA+E;AAE/E,MAAM,eAAe;AAErB,eAAe,OAAO;IACpB,iCAAiC;IACjC,IAAI,OAAO,OAAO,QAAQ,KAAK,aAAa;QAC1C,MAAM;QACN;IACF,CAAC;IAED,yBAAyB;IACzB,MAAM,OAAO,QAAQ,CAAC,OAAO,CAAC;QAAE,QAAQ;IAAsB;IAE9D,MAAM,OAAO,IAAI,KAAK,OAAO,QAAQ;IACrC,MAAM,CAAC,cAAc,GAAG,MAAM,KAAK,GAAG,CAAC,WAAW;IAElD,MAAM,YAAY;IAClB,MAAM,cAAc;IAEpB,MAAM,aAAa,IAAI,YAAY;QACjC;QACA,eAAe;IACjB;IAEA,MAAM,cAAc,IAAI,WAAW;QAAE;QAAc;IAAW;IAE9D,MAAM,kBAAkB;IACxB,MAAM,SAAS;IACf,MAAM,SAAS;IAEf,MAAM,OAAO,KAAK,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAC1C;QACE,MAAM;QACN,MAAM;QACN,QAAQ;YACN;gBAAE,MAAM;gBAAW,MAAM;YAAW;YACpC;gBAAE,MAAM;gBAAW,MAAM;YAAY;SACtC;IACH,GACA;QAAC;QAAQ;KAAO;IAGlB,MAAM,sBAAsB;QAC1B,IAAI;QACJ;QACA,OAAO;IACT;IAEA,MAAM,UAAU,MAAM,KAAK,MAAM,CAAC;QAAE;QAAY,aAAa;IAAY;IACzE,MAAM,kBAAkB,MAAM,QAAQ,iBAAiB,CAAC;QAAE;IAAoB;IAE9E,MAAM,aAAa,MAAM,QAAQ,kBAAkB,CAAC;IACpD,MAAM,kBAAkB,MAAM,QAAQ,mBAAmB,CAAC;IAC1D,MAAM,qBAAqB,MAAM,YAAY,kBAAkB,CAAC;QAC9D;QACA,qBAAqB,gBAAgB,IAAI;QACzC;QACA;QACA,iBAAiB,gBAAgB,IAAI;QACrC;IACF;IAEA,QAAQ,GAAG,CAAC,yBAAyB;AACvC;AACA,SAAS,cAAc,CAAC,WAAW,gBAAgB,CAAC,SAAS,IAAM;IACjE,OAAO,KAAK,CAAC,CAAC,QAAU;QACtB,QAAQ,KAAK,CAAC,sBAAsB;IACtC;AACF","sources":["index.js"],"sourcesContent":["//import Web3 from 'web3'\n//import { Web3Adapter } from '@safe-global/protocol-kit'\n//import SafeApiKit from '@safe-global/api-kit'\n//import Safe, { SafeFactory } from '@safe-global/protocol-kit'\n//import { SafeTransactionDataPartial } from '@safe-global/safe-core-sdk-types'\n\nconst txServiceUrl = 'https://safe-transaction-goerli.safe.global/'\n\nasync function main() {\n  // Check if MetaMask is installed\n  if (typeof window.ethereum === 'undefined') {\n    alert('MetaMask is not installed. Please install MetaMask and try again.')\n    return\n  }\n\n  // Request account access\n  await window.ethereum.request({ method: 'eth_requestAccounts' })\n\n  const web3 = new Web3(window.ethereum)\n  const [senderAddress] = await web3.eth.getAccounts()\n\n  const safeOwner = senderAddress\n  const safeAddress = '0x0914566875dF1b7Fb6cb67c55058194D6a0616c3'\n\n  const ethAdapter = new Web3Adapter({\n    web3,\n    signerAddress: safeOwner\n  })\n\n  const safeService = new SafeApiKit({ txServiceUrl, ethAdapter })\n\n  const contractAddress = '0xCBE177C44Cff283701f82e69526677a896F1f4b1'\n  const param1 = '999999999'\n  const param2 = '9999999999'\n\n  const data = web3.eth.abi.encodeFunctionCall(\n    {\n      name: 'set',\n      type: 'function',\n      inputs: [\n        { type: 'uint256', name: 'latitude' },\n        { type: 'uint256', name: 'longitude' },\n      ],\n    },\n    [param1, param2]\n  )\n\n  const safeTransactionData = {\n    to: contractAddress,\n    data,\n    value: '0',\n  };\n  \n  const safeSdk = await Safe.create({ ethAdapter, safeAddress: safeAddress })\n  const safeTransaction = await safeSdk.createTransaction({ safeTransactionData })\n\n  const safeTxHash = await safeSdk.getTransactionHash(safeTransaction)\n  const senderSignature = await safeSdk.signTransactionHash(safeTxHash)\n  const proposedTxResponse = await safeService.proposeTransaction({\n    safeAddress,\n    safeTransactionData: safeTransaction.data,\n    safeTxHash,\n    senderAddress,\n    senderSignature: senderSignature.data,\n    origin\n  })\n\n  console.log('Transaction proposed:', proposedTxResponse)\n}\ndocument.getElementById('execute').addEventListener('click', () => {\n  main().catch((error) => {\n    console.error('An error occurred:', error)\n  })\n})\n\n\n"],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}